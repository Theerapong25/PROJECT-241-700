const BASE_URL = "http://localhost:8080";

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á reservations
async function fetchReservations() {
    axios.get(`${BASE_URL}/reservations`)
        .then(response => {
            const reservations = response.data;
            const tbody = document.getElementById("reservation-list");
            tbody.innerHTML = "";

            if (reservations.length === 0) {
                tbody.innerHTML = "<tr><td colspan='6'>‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á</td></tr>";
                return;
            }

            reservations.forEach(reservation => {
                const returnDate = reservation.return_date ? reservation.return_date : "üìå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô";
                const isReturned = reservation.return_date !== null;
                
                const row = `
                    <tr>
                        <td>${reservation.book_id}</td>
                        <td>${reservation.borrow_date}</td>
                        <td>${reservation.due_date}</td>
                        <td>${reservation.status}</td>
                        <td>${returnDate}</td>
                        <td>
                            ${isReturned ? "‚úÖ ‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏•‡πâ‡∏ß" : `<button onclick="returnBook(${reservation.id}, '${reservation.due_date}')">üìå ‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠</button>`}
                        </td>
                    </tr>
                `;
                tbody.innerHTML += row;
            });
        })
        .catch(error => {
            console.error("üö® Error fetching reservations:", error);
            document.getElementById("reservation-list").innerHTML = "<tr><td colspan='6'>‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß</td></tr>";
        });
}

async function returnBook(reservationId, dueDate) {
    // üìå ‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏≠‡∏á
    const returnDate = prompt("üìÖ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ (YYYY-MM-DD):");

    if (!returnDate) {
        alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠!");
        return;
    }

    // ‚úÖ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô‡∏Å‡∏±‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô
    const status = returnDate > dueDate ? "overdue" : "returned";

    try {
        const response = await axios.put(`${BASE_URL}/reservations/${reservationId}`, {
            return_date: returnDate,
            status: status
        });

        alert("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        fetchReservations(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
    } catch (error) {
        console.error("üö® Error updating return status:", error);
        alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
    }
}


// ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
document.addEventListener("DOMContentLoaded", fetchReservations);
